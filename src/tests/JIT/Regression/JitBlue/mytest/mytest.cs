// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// Adapted from:
// Generated by Fuzzlyn v1.5 on 2022-11-14 02:52:08
// Run on Arm64 Windows
// Seed: 11038715273855459808
// Reduced from 96.6 KiB to 0.9 KiB in 00:08:38
// Debug: Outputs 0
// Release: Outputs 1
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Numerics;


public class Runtime_78310
{

    private static readonly int ElementCount512 = Unsafe.SizeOf<Vector512<Int32>>() / sizeof(Int32);
    private static readonly int ElementCount256 = Unsafe.SizeOf<Vector256<Int32>>() / sizeof(Int32);
    public static unsafe int Main()
    {

        /*Vector512<Int32> resultElementsFromVal512 = getVec512FromVal(3);
        for (var i = 0; i < ElementCount512; i++)
        {
            Console.WriteLine("\n getVec512FromVal Deepak i = " + i + ", val = " + resultElementsFromVal512[i] + "\n");
            if (resultElementsFromVal512[i] != 3)
            {
                Console.WriteLine("\n Deepak Fail 512 \n");
                return -1;
            }
        }


        Vector256<Int32> resultElementsFromVal256 = getVec256FromVal(4);
        for (var i = 0; i < ElementCount256; i++)
        {
            Console.WriteLine("\ngetVec256FromVal Deepak i = " + i + ", val = " + resultElementsFromVal256[i] + "\n");
            if (resultElementsFromVal256[i] != 4)
            {
                Console.WriteLine("\n Deepak Fail 256 \n");
                return -1;
            }
        }

        Vector256<Int32> resultElementsFromOneConst256 = getVec256FromOneConst();
        for (var i = 0; i < ElementCount256; i++)
        {
            Console.WriteLine("\n getVec256FromOneConst Deepak i = " + i + ", val = " + resultElementsFromOneConst256[i] + "\n");
            if (resultElementsFromOneConst256[i] != 4)
            {
                Console.WriteLine("\n Deepak FromOneConst Fail 256 \n");
                return -1;
            }
        }

        Vector512<Int32> resultElementsFromOneConst512 = getVec512FromOneConst();
        for (var i = 0; i < ElementCount512; i++)
        {
            Console.WriteLine("\n getVec512FromOneConst Test Deepak i = " + i + ", val = " + resultElementsFromOneConst512[i] + "\n");
            if (resultElementsFromOneConst512[i] != 3)
            {
                Console.WriteLine("\n Deepak FromOneConst Fail 512 \n");
                return -1;
            }
        }

        Vector256<Int32> resultElementsFromConsts256 = getVec256FromConsts();
        for (var i = 0; i < ElementCount256; i++)
        {
            Console.WriteLine("\n getVec256FromConsts Deepak i = " + i + ", val = " + resultElementsFromConsts256[i] + "\n");
            if (resultElementsFromConsts256[i] != i)
            {
                Console.WriteLine("\n Deepak FromConsts Fail 256 \n");
                return -1;
            }
        }

        Vector512<Int32> resultElementsFromConsts512 = getVec512FromConsts();
        for (var i = 0; i < ElementCount512; i++)
        {
            Console.WriteLine("\n getVec512FromConsts Test Deepak i = " + i + ", val = " + resultElementsFromConsts512[i] + "\n");
            if (resultElementsFromConsts512[i] != i)
            {
                Console.WriteLine("\n Deepak FromConsts Fail 512 \n");
                return -1;
            }
        }

        Vector512<byte> resultElements512ConstVar = getVec512ConstVar((byte)0, (byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15,
                                                                       (byte)16, (byte)17, (byte)18, (byte)19, (byte)20, (byte)21, (byte)22, (byte)23, (byte)24, (byte)25, (byte)26, (byte)27, (byte)28, (byte)29, (byte)30, (byte)31,
                                                                       (byte)32, (byte)33, (byte)34, (byte)35, (byte)36, (byte)37, (byte)38, (byte)39, (byte)40, (byte)41, (byte)42, (byte)43, (byte)44, (byte)45, (byte)46, (byte)47,
                                                                       (byte)48, (byte)49, (byte)50, (byte)51, (byte)52, (byte)53, (byte)54, (byte)55, (byte)56, (byte)57, (byte)58, (byte)59, (byte)60, (byte)61, (byte)62, (byte)63);
        for (var i = 0; i < 64; i++)
        {
            Console.WriteLine("\n getVec512ConstVar Deepak i = " + i + ", val = " + resultElements512ConstVar[i] + "\n");

        }
        Console.WriteLine("\n Deepak Pass \n");


        

        Vector256<byte> resultElements256ConstVar = getVec256ConstVar((byte)0, (byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15,
                                                                       (byte)16, (byte)17, (byte)18, (byte)19, (byte)20, (byte)21, (byte)22, (byte)23, (byte)24, (byte)25, (byte)26, (byte)27, (byte)28, (byte)29, (byte)30, (byte)31);
        for (var i = 0; i < 32; i++)
        {
            Console.WriteLine("\n getVec256ConstVar Deepak i = " + i + ", val = " + resultElements256ConstVar[i] + "\n");

        }

        Vector512<Int64> resultElements512ConstArr = getVec512ConstArr();
        for (var i = 0; i < Vector512<Int64>.Count; i++)
        {
            Console.WriteLine("\n getVec512ConstVar Deepak i = " + i + ", val = " + resultElements512ConstArr[i] + "\n");
          
        }
        Console.WriteLine("\n Deepak Pass \n");

        Vector256<Int64> resultElements256ConstArr = getVec256ConstArr();
        for (var i = 0; i < Vector256<Int64>.Count; i++)
        {
            Console.WriteLine("\n getVec256ConstVar Deepak i = " + i + ", val = " + resultElements256ConstArr[i] + "\n");
            
        }*/

        /*Vector512<int> resultElements512Load = Vector512LoadTest();
        for (var i = 0; i < Vector512<int>.Count; i++)
        {
            Console.WriteLine("\n Vector512LoadTest Deepak i = " + i + ", val = " + resultElements512Load[i] + "\n");

        }
        Console.WriteLine("\n Vector512LoadTest Pass \n\n\n\n\n");

        Vector256<int> resultElements256Load = Vector256LoadTest();
        for (var i = 0; i < Vector256<int>.Count; i++)
        {
            Console.WriteLine("\n Vector256LoadTest Deepak i = " + i + ", val = " + resultElements256Load[i] + "\n");

        }
        Console.WriteLine("\n Vector256LoadTest Pass \n\n\n\n\n");

        Vector512<int> resultElements512LoadUnsafe = Vector512LoadUnsafeTest();
        for (var i = 0; i < Vector512<int>.Count; i++)
        {
            Console.WriteLine("\n Vector512LoadUnsafeTest Deepak i = " + i + ", val = " + resultElements512LoadUnsafe[i] + "\n");

        }
        Console.WriteLine("\n Vector512LoadUnsafeTest Pass \n\n\n\n\n");

        Vector256<int> resultElements256LoadUnsafe = Vector256LoadUnsafeTest();
        for (var i = 0; i < Vector256<int>.Count; i++)
        {
            Console.WriteLine("\n Vector256LoadUnsafeTest Deepak i = " + i + ", val = " + resultElements256LoadUnsafe[i] + "\n");

        }
        Console.WriteLine("\n Vector256LoadUnsafeTest Pass \n\n\n\n\n");

        Vector512<int> resultElements512LoadAligned = Vector512LoadAlignedTest();
        for (var i = 0; i < Vector512<int>.Count; i++)
        {
            Console.WriteLine("\n Vector512LoadAlignedTest Deepak i = " + i + ", val = " + resultElements512LoadAligned[i] + "\n");

        }
        Console.WriteLine("\n Vector512LoadAlignedTest Pass \n\n\n\n\n");

        Vector256<int> resultElements256LoadAligned = Vector256LoadAlignedTest();
        for (var i = 0; i < Vector256<int>.Count; i++)
        {
            Console.WriteLine("\n Vector256LoadAlignedTest Deepak i = " + i + ", val = " + resultElements256LoadAligned[i] + "\n");

        }
        Console.WriteLine("\n Vector256LoadAlignedTest Pass \n\n\n\n\n");

        Vector512<int> resultElements512LoadAlignedNT = Vector512LoadAlignedTestNT();
        for (var i = 0; i < Vector512<int>.Count; i++)
        {
            Console.WriteLine("\n Vector512LoadAlignedTestNT Deepak i = " + i + ", val = " + resultElements512LoadAlignedNT[i] + "\n");

        }
        Console.WriteLine("\n Vector512LoadAlignedTest Pass \n\n\n\n\n");

        Vector256<int> resultElements256LoadAlignedNT = Vector256LoadAlignedTestNT();
        for (var i = 0; i < Vector256<int>.Count; i++)
        {
            Console.WriteLine("\n Vector256LoadAlignedTestNT Deepak i = " + i + ", val = " + resultElements256LoadAlignedNT[i] + "\n");

        }
        Console.WriteLine("\n Vector256LoadAlignedTestNT Pass \n\n\n\n\n");

        int* valueStack256 = stackalloc int[Vector256<int>.Count];
        for (int index = 0; index < Vector256<int>.Count; index++)
        {
            valueStack256[index] = index;
        }
        Vector256<int> resultElements256Load = Vector256LoadTest(valueStack256);
        for (var i = 0; i < Vector256<int>.Count; i++)
        {
            Console.WriteLine("\n Vector256LoadTest Deepak i = " + i + ", val = " + resultElements256Load[i] + "\n");

        }
        Console.WriteLine("\n Vector256LoadTest Pass \n\n\n\n\n");

        for (int index = 0; index < Vector256<int>.Count; index++)
        {
            valueStack256[index] = 0;
        }
        Vector256StoreTest(resultElements256Load, valueStack256);


        for (int index = 0; index < Vector256<int>.Count; index++)
        {
            Console.WriteLine("\n Vector256StoreTest Deepak i = " + index + ", val = " + valueStack256[index] + "\n");
        }
        Console.WriteLine("\n Vector256StoreTest Pass \n\n\n\n\n");



        int* valueStack512 = stackalloc int[Vector512<int>.Count];
        for (int index = 0; index < Vector512<int>.Count; index++)
        {
            valueStack512[index] = index;
        }
        Vector512<int> resultElements512Load = Vector512LoadTest(valueStack512);
        for (var i = 0; i < Vector512<int>.Count; i++)
        {
            Console.WriteLine("\n Vector512LoadTest Deepak i = " + i + ", val = " + resultElements512Load[i] + "\n");

        }
        Console.WriteLine("\n Vector512LoadTest Pass \n\n\n\n\n");

        for (int index = 0; index < Vector512<int>.Count; index++)
        {
            valueStack512[index] = 0;
        }
        Vector512StoreTest(resultElements512Load, valueStack512);


        for (int index = 0; index < Vector512<int>.Count; index++)
        {
            Console.WriteLine("\n Vector512StoreTest Deepak i = " + index + ", val = " + valueStack512[index] + "\n");
        }
        Console.WriteLine("\n Vector512StoreTest Pass \n\n\n\n\n");





        Vector256<int> resultElements256LoadUnsafe = Vector256LoadUnsafeTest(valueStack256);
        for (var i = 0; i < Vector256<int>.Count; i++)
        {
            Console.WriteLine("\n Vector256LoadUnsafeTest Deepak i = " + i + ", val = " + resultElements256LoadUnsafe[i] + "\n");

        }
        Console.WriteLine("\n Vector256LoadUnsafeTest Pass \n\n\n\n\n");

        for (int index = 0; index < Vector256<int>.Count; index++)
        {
            valueStack256[index] = 0;
        }
        Vector256StoreUnsafeTest(resultElements256LoadUnsafe, valueStack256);


        for (int index = 0; index < Vector256<int>.Count; index++)
        {
            Console.WriteLine("\n Vector256StoreUnsafeTest Deepak i = " + index + ", val = " + valueStack256[index] + "\n");
        }
        Console.WriteLine("\n Vector256StoreUnsafeTest Pass \n\n\n\n\n");



        Vector512<int> resultElements512LoadUnsafe = Vector512LoadUnsafeTest(valueStack512);
        for (var i = 0; i < Vector512<int>.Count; i++)
        {
            Console.WriteLine("\n Vector512LoadUnsafeTest Deepak i = " + i + ", val = " + resultElements512LoadUnsafe[i] + "\n");

        }
        Console.WriteLine("\n Vector512LoadUnsafeTest Pass \n\n\n\n\n");

        for (int index = 0; index < Vector512<int>.Count; index++)
        {
            valueStack512[index] = 0;
        }
        Vector512StoreUnsafeTest(resultElements512LoadUnsafe, valueStack512);


        for (int index = 0; index < Vector512<int>.Count; index++)
        {
            Console.WriteLine("\n Vector512StoreUnsafeTest Deepak i = " + index + ", val = " + valueStack512[index] + "\n");
        }
        Console.WriteLine("\n Vector512StoreUnsafeTest Pass \n\n\n\n\n");


       


        int* valueAligned512 = null;

        try
        {
            valueAligned512 = (int*)NativeMemory.AlignedAlloc(byteCount: 64, alignment: 64);

            for (int index = 0; index < Vector512<int>.Count; index++)
            {
                valueAligned512[index] = index;
            }

            Vector512<int> resultElements512LoadAligned = Vector512LoadAlignedTest(valueAligned512);
            for (var i = 0; i < Vector512<int>.Count; i++)
            {
                Console.WriteLine("\n Vector512LoadAlignedTest Deepak i = " + i + ", val = " + resultElements512LoadAligned[i] + "\n");

            }
            Console.WriteLine("\n Vector512LoadAlignedTest Pass \n\n\n\n\n");

            for (int index = 0; index < Vector512<int>.Count; index++)
            {
                valueAligned512[index] = 0;
            }

            Vector512AlignedStoreTest(resultElements512LoadAligned, valueAligned512);


            for (int index = 0; index < Vector512<int>.Count; index++)
            {
                Console.WriteLine("\n Vector512AlignedStoreTest Deepak i = " + index + ", val = " + valueAligned512[index] + "\n");
            }

            Console.WriteLine("\n Vector512AlignedStoreTest Pass \n\n\n\n\n");

            Vector512<int> resultElements512LoadAlignedNT = Vector512LoadAlignedNTTest(valueAligned512);
            for (var i = 0; i < Vector512<int>.Count; i++)
            {
                Console.WriteLine("\n Vector512LoadAlignedNTTest Deepak i = " + i + ", val = " + resultElements512LoadAligned[i] + "\n");

            }
            Console.WriteLine("\n Vector512LoadAlignedNTTest Pass \n\n\n\n\n");

            for (int index = 0; index < Vector512<int>.Count; index++)
            {
                valueAligned512[index] = 0;
            }

            Vector512AlignedStoreNTTest(resultElements512LoadAlignedNT, valueAligned512);


            for (int index = 0; index < Vector512<int>.Count; index++)
            {
                Console.WriteLine("\n Vector512AlignedStoreNTTest Deepak i = " + index + ", val = " + valueAligned512[index] + "\n");
            }
            Console.WriteLine("\n Vector512AlignedStoreNTTest Pass \n\n\n\n\n");

        }
        finally
        {
            NativeMemory.AlignedFree(valueAligned512);
        }

        int* valueAligned256 = null;
        try
        {
            valueAligned256 = (int*)NativeMemory.AlignedAlloc(byteCount: 32, alignment: 32);

            for (int index = 0; index < Vector256<int>.Count; index++)
            {
                valueAligned256[index] = index;
            }

            Vector256<int> resultElements256LoadAligned = Vector256LoadAlignedTest(valueAligned256);
            for (var i = 0; i < Vector256<int>.Count; i++)
            {
                Console.WriteLine("\n Vector256LoadAlignedTest Deepak i = " + i + ", val = " + resultElements256LoadAligned[i] + "\n");

            }
            Console.WriteLine("\n Vector256LoadAlignedTest Pass \n\n\n\n\n");

            for (int index = 0; index < Vector256<int>.Count; index++)
            {
                valueAligned256[index] = 0;
            }

            Vector256AlignedStoreTest(resultElements256LoadAligned, valueAligned256);


            for (int index = 0; index < Vector256<int>.Count; index++)
            {
                Console.WriteLine("\n Vector256AlignedStoreTest Deepak i = " + index + ", val = " + valueAligned256[index] + "\n");
            }

            Console.WriteLine("\n Vector256AlignedStoreTest Pass \n\n\n\n\n");

            Vector256<int> resultElements256LoadAlignedNT = Vector256LoadAlignedNTTest(valueAligned256);
            for (var i = 0; i < Vector256<int>.Count; i++)
            {
                Console.WriteLine("\n Vector256LoadAlignedNTTest Deepak i = " + i + ", val = " + resultElements256LoadAligned[i] + "\n");

            }
            Console.WriteLine("\n Vector256LoadAlignedNTTest Pass \n\n\n\n\n");

            for (int index = 0; index < Vector256<int>.Count; index++)
            {
                valueAligned256[index] = 0;
            }

            Vector256AlignedStoreNTTest(resultElements256LoadAlignedNT, valueAligned256);


            for (int index = 0; index < Vector256<int>.Count; index++)
            {
                Console.WriteLine("\n Vector256AlignedStoreNTTest Deepak i = " + index + ", val = " + valueAligned256[index] + "\n");
            }
            Console.WriteLine("\n Vector256AlignedStoreNTTest Pass \n\n\n\n\n");
        }
        finally
        {
            NativeMemory.AlignedFree(valueAligned256);
        }*/


        /*Vector512<Int32> resultElements512 = getVec512Zero();
        for (var i = 0; i < ElementCount512; i++)
        {
            Console.WriteLine("\n getVec512Zero Deepak i = " + i + ", val = " + resultElements512[i] + "\n");
        }
        Console.WriteLine("\n Deepak getVec512Zero Pass \n");

        Vector256<Int32> resultElements256 = getVec256Zero();
        for (var i = 0; i < ElementCount256; i++)
        {
            Console.WriteLine("\n getVec256Zero Deepak i = " + i + ", val = " + resultElements256[i] + "\n");
        }
        Console.WriteLine("\n Deepak getVec256Zero Pass \n");

        resultElements512 = getVec512One();
        for (var i = 0; i < ElementCount512; i++)
        {
            Console.WriteLine("\n getVec512One Deepak i = " + i + ", val = " + resultElements512[i] + "\n");
        }
        Console.WriteLine("\n Deepak getVec512One Pass \n");

        resultElements256 = getVec256One();
        for (var i = 0; i < ElementCount256; i++)
        {
            Console.WriteLine("\n getVec256One Deepak i = " + i + ", val = " + resultElements256[i] + "\n");
        }
        Console.WriteLine("\n Deepak getVec256One Pass \n");


        resultElements512 = getVec512AllBitsSet();
        for (var i = 0; i < ElementCount512; i++)
        {
            Console.WriteLine("\n getVec512AllBitsSet Deepak i = " + i + ", val = " + resultElements512[i] + "\n");

        }
        Console.WriteLine("\n Deepak getVec512AllBitsSet Pass \n");

        resultElements256 = getVec256AllBitsSet();
        for (var i = 0; i < ElementCount256; i++)
        {
            Console.WriteLine("\n getVec256AllBitsSet Deepak i = " + i + ", val = " + resultElements256[i] + "\n");
        }
        Console.WriteLine("\n Deepak getVec256AllBitsSet Pass \n");


        Vector256<int> resultElements256CreateScalarUnsafe = Vector256CreateScalarUnsafeTest(3);
        for (var i = 0; i < Vector256<int>.Count; i++)
        {
            Console.WriteLine("\n Vector256CreateScalarUnsafeTest Deepak i = " + i + ", val = " + resultElements256CreateScalarUnsafe[i] + "\n");

        }
        Console.WriteLine("\n Vector256CreateScalarUnsafeTest Pass \n\n\n\n\n");

        Vector512<int> resultElements512CreateScalarUnsafe = Vector512CreateScalarUnsafeTest(3);
        for (var i = 0; i < Vector512<int>.Count; i++)
        {
            Console.WriteLine("\n Vector512CreateScalarUnsafeTest Deepak i = " + i + ", val = " + resultElements512CreateScalarUnsafe[i] + "\n");

        }
        Console.WriteLine("\n Vector512CreateScalarUnsafeTest Pass \n\n\n\n\n");

        Vector256<int> resultElements256CreateScalar = Vector256CreateScalarTest(3);
        for (var i = 0; i < Vector256<int>.Count; i++)
        {
            Console.WriteLine("\n Vector256CreateScalarTest Deepak i = " + i + ", val = " + resultElements256CreateScalar[i] + "\n");

        }
        Console.WriteLine("\n Vector256CreateScalarTest Pass \n\n\n\n\n");

        Vector512<int> resultElements512CreateScalar = Vector512CreateScalarTest(3);
        for (var i = 0; i < Vector512<int>.Count; i++)
        {
            Console.WriteLine("\n Vector512CreateScalarTest Deepak i = " + i + ", val = " + resultElements512CreateScalar[i] + "\n");

        }
        Console.WriteLine("\n Vector512CreateScalarTest Pass \n\n\n\n\n");*/

        /*Vector256<int> asVec256 = Vector256.Create(4);

        Vector256<Int64> resultElements256AsInt64 = Vector256AsInt64Test(asVec256);


        for (int index = 0; index < Vector256<Int64>.Count; index++)
        {
            Console.WriteLine("\n Vector256AsInt64Test Deepak i = " + index + ", val = " + resultElements256AsInt64[index] + "\n");
        }
        Console.WriteLine("\n Vector256AsInt64Test Pass \n\n\n\n\n");


        Vector512<int> asVec512 = Vector512.Create(6);
        Vector512<Int64> resultElements512AsInt64 = Vector512AsInt64Test(asVec512);


        for (int index = 0; index < Vector512<Int64>.Count; index++)
        {
            Console.WriteLine("\n Vector512AsInt64Test Deepak i = " + index + ", val = " + resultElements512AsInt64[index] + "\n");
        }
        Console.WriteLine("\n Vector512AsInt64Test Pass \n\n\n\n\n");*/

        /*Vector128<float> lowVec256 = Vector128.Create(4).AsSingle();

        Vector256<float> resultElements256lowInt = Vector256LowerTest(lowVec256, lowVec256);


        for (int index = 0; index < Vector256<float>.Count; index++)
        {
            Console.WriteLine("\n Vector256LowerTest Deepak i = " + index + ", val = " + resultElements256lowInt[index] + "\n");
        }
        Console.WriteLine("\n Vector256LowerTest Pass \n\n\n\n\n");


        Vector256<float> lowVec512 = Vector256.Create(4).AsSingle();

        Vector512<float> resultElements512lowInt = Vector512LowerTest(lowVec512, lowVec512);


        for (int index = 0; index < Vector512<float>.Count; index++)
        {
            Console.WriteLine("\n Vector512LowerTest Deepak i = " + index + ", val = " + resultElements512lowInt[index] + "\n");
        }
        Console.WriteLine("\n Vector512LowerTest Pass \n\n\n\n\n");*/

        Vector256<float> lowVec256 = Vector256.Create(4).AsSingle();
        Vector<int> resultElements256lowInt = Vector.As<float, int>(Vector256AsVector(lowVec256));

        for (int index = 0; index < Vector<int>.Count; index++)
        {
            Console.WriteLine("\n Vector256AsVector Deepak i = " + index + ", val = " + resultElements256lowInt[index] + "\n");
        }
        Console.WriteLine("\n Vector256AsVector Pass \n\n\n\n\n");

        Vector512<float> lowVec512 = Vector512.Create(6).AsSingle();
        Vector<int> resultElements512lowInt = Vector.As<float, int>(Vector512AsVector(lowVec512));

        for (int index = 0; index < Vector<int>.Count; index++)
        {
            Console.WriteLine("\n Vector512AsVector Deepak i = " + index + ", val = " + resultElements512lowInt[index] + "\n");
        }
        Console.WriteLine("\n Vector512AsVector Pass \n\n\n\n\n");


        Vector<int> vecT = new Vector<int>(4);
        Vector256<int> resultElements256AsVector256 = Vector256AsVector256(vecT);
        for (int index = 0; index < Vector256<int>.Count; index++)
        {
            Console.WriteLine("\n Vector256AsVector256 Deepak i = " + index + ", val = " + resultElements256AsVector256[index] + "\n");
        }
        Console.WriteLine("\n Vector256AsVector256 Pass \n\n\n\n\n");

        Vector512<int> resultElements512AsVector512 = Vector512AsVector512(vecT);
        for (int index = 0; index < Vector512<int>.Count; index++)
        {
            Console.WriteLine("\n Vector512AsVector512 Deepak i = " + index + ", val = " + resultElements512AsVector512[index] + "\n");
        }
        Console.WriteLine("\n Vector512AsVector512 Pass \n\n\n\n\n");

        return 100;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector256<int> Vector256AsVector256(Vector<int> vecT)
    {
        return Vector256.AsVector256(vecT);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector512<int> Vector512AsVector512(Vector<int> vecT)
    {
        return Vector512.AsVector512(vecT);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector<float> Vector256AsVector(Vector256<float> value1)
    {
        return Vector256.AsVector(value1);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector<float> Vector512AsVector(Vector512<float> value1)
    {
        return Vector512.AsVector(value1);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector256<int> Vector256AddTest(Vector256<int> arg1, Vector256<int> arg2)
    {
        return Vector256.Add(arg1, arg2); ;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector512<int> Vector512AddTest(Vector512<int> arg1, Vector512<int> arg2)
    {
        return Vector512.Add(arg1, arg2); ;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector256<sbyte> Vector256CreateSByte()
    {
        return Vector256.Create((sbyte)-1); ;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector512<sbyte> Vector512CreateSByte()
    {
        return Vector512.Create((sbyte)-1); ;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector256<Int64> Vector256AsInt64Test(Vector256<int> value)
    {
        Vector256<Int64> vector = Vector256.AsInt64(value);
        return vector;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector512<Int64> Vector512AsInt64Test(Vector512<int> value)
    {
        Vector512<Int64> vector = Vector512.AsInt64(value);
        return vector;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector256<int> Vector256CreateScalarUnsafeTest(int value)
    {
        Vector256<int> vector = Vector256.CreateScalarUnsafe(value);

        return vector;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector512<int> Vector512CreateScalarUnsafeTest(int value)
    {
        Vector512<int> vector = Vector512.CreateScalarUnsafe(value);

        return vector;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector256<int> Vector256CreateScalarTest(int value)
    {
        Vector256<int> vector = Vector256.CreateScalar(value);

        return vector;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector512<int> Vector512CreateScalarTest(int value)
    {
        Vector512<int> vector = Vector512.CreateScalar(value);

        return vector;
    }


    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector512<Int32> getVec512Zero()
    {
        return Vector512<Int32>.Zero;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector256<Int32> getVec256Zero()
    {
        return Vector256<Int32>.Zero;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector512<Int32> getVec512One()
    {
        return Vector512<Int32>.One;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector256<Int32> getVec256One()
    {
        return Vector256<Int32>.One;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector512<Int32> getVec512AllBitsSet()
    {
        return Vector512<Int32>.AllBitsSet;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector256<Int32> getVec256AllBitsSet()
    {
        return Vector256<Int32>.AllBitsSet;
    }

    

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe void Vector256StoreTest(Vector256<int> src, int* dst)
    {
        src.Store(dst);
        return;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe void Vector512StoreTest(Vector512<int> src, int* dst)
    {
        src.Store(dst);
        return;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe void Vector256StoreUnsafeTest(Vector256<int> src, int* dst)
    {
        src.StoreUnsafe(ref dst[0]);
        return;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe void Vector512StoreUnsafeTest(Vector512<int> src, int* dst)
    {
    src.StoreUnsafe(ref dst[0]);
    return;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe void Vector256AlignedStoreTest(Vector256<int> src, int* dst)
    {
        src.StoreAligned(dst);
        return;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe void Vector512AlignedStoreTest(Vector512<int> src, int* dst) 
    {
        src.StoreAligned(dst);
        return;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe void Vector256AlignedStoreNTTest(Vector256<int> src, int* dst)
    {
        src.StoreAlignedNonTemporal(dst);
        return;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe void Vector512AlignedStoreNTTest(Vector512<int> src, int* dst)
    {
        src.StoreAlignedNonTemporal(dst);
        return;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector256<int> Vector256LoadTest(int* value)
    {
        Vector256<int> vector = Vector256.Load(value);

        return vector;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector512<int> Vector512LoadTest(int* value)
    {
        Vector512<int> vector = Vector512.Load(value);

        return vector;
    }

    

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector256<int> Vector256LoadUnsafeTest(int* value)
    {
        Vector256<int> vector = Vector256.LoadUnsafe(ref value[0]);
        return vector;
    }


    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector512<int> Vector512LoadUnsafeTest(int* value)
    {
        Vector512<int> vector = Vector512.LoadUnsafe(ref value[0]);
        return vector;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector256<int> Vector256LoadAlignedTest(int* value)
    {
        Vector256<int>  vector = Vector256.LoadAligned(value);
        return vector;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector512<int> Vector512LoadAlignedTest(int* value)
    {
        Vector512<int> vector = Vector512.LoadAligned(value);
        return vector;
    }


    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector256<int> Vector256LoadAlignedNTTest(int* value)
    {
        Vector256<int> vector = Vector256.LoadAlignedNonTemporal(value);
        return vector;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static unsafe Vector512<int> Vector512LoadAlignedNTTest(int* value)
    {
        Vector512<int> vector = Vector512.LoadAlignedNonTemporal(value);
        return vector;
    }


    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector512<Int64> getVec512ConstArr()
    {
        Int64[] values = new Int64[Vector512<Int64>.Count];

        for (int i = 0; i < Vector512<Int64>.Count; i++)
        {
            values[i] = i;
        }
        Vector512<Int64> val = Vector512.Create(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7]);
        //Vector256<Int64> low = val.GetLower().AsInt64();
        Vector256<Int64> high = val.GetUpper();
        /*for (var i = 0; i < Vector256<Int64>.Count; i++)
        {
            Console.WriteLine("\n getVec512ConstVar Inside i = " + i + ", val = " + high[i] + "\n");

        }*/

        return val;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector256<Int64> getVec256ConstArr()
    {
        Int64[] values = new Int64[Vector256<Int64>.Count];

        for (int i = 0; i < Vector256<Int64>.Count; i++)
        {
            values[i] = (byte)i;
        }
        Vector256<Int64> val = Vector256.Create(values[0], values[1], values[2], values[3]);
        //Vector128<Int64> low = val.GetLower().AsInt64();
        Vector128<Int64> high = val.GetUpper();
        /*for (var i = 0; i < 2; i++)
        {
            Console.WriteLine("\n INSIDE Deepak i = " + i + ", Upper = " + high[i] + ", lower = " + low[i] + "\n");
        }*/
        return val;
    }

    /*[MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector512<byte> getVec512ConstArr()
    {
    byte[] values = new byte[64];

    for (int i = 0; i < 64; i++)
    {
        values[i] = (byte)i;
    }
    return Vector512.Create(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7],
                                values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15],
                                values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23],
                                values[24], values[25], values[26], values[27], values[28], values[29], values[30], values[31],
                                values[32], values[33], values[34], values[35], values[36], values[37], values[38], values[39],
                                values[40], values[41], values[42], values[43], values[44], values[45], values[46], values[47],
                                values[48], values[49], values[50], values[51], values[52], values[53], values[54], values[55],
                                values[56], values[57], values[58], values[59], values[60], values[61], values[62], values[63]);
    }*/

    /*[MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector256<byte> getVec256ConstArr()
    {
        byte [] values = new byte[32];

        for (int i = 0; i < 32; i++)
        {
            values[i] = (byte)i;
        }
        return Vector256.Create(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7],
                                values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15],
                                values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23],
                                values[24], values[25], values[26], values[27], values[28], values[29], values[30], values[31]);
    }*/

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector512<byte> getVec512ConstVar(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7,
                                                     byte b10, byte b11, byte b12, byte b13, byte b14, byte b15, byte b16, byte b17,
                                                     byte b20, byte b21, byte b22, byte b23, byte b24, byte b25, byte b26, byte b27,
                                                     byte b30, byte b31, byte b32, byte b33, byte b34, byte b35, byte b36, byte b37,
                                                     byte b40, byte b41, byte b42, byte b43, byte b44, byte b45, byte b46, byte b47,
                                                     byte b50, byte b51, byte b52, byte b53, byte b54, byte b55, byte b56, byte b57,
                                                     byte b60, byte b61, byte b62, byte b63, byte b64, byte b65, byte b66, byte b67,
                                                     byte b70, byte b71, byte b72, byte b73, byte b74, byte b75, byte b76, byte b77)
    {
        return Vector512.Create(b0, b1, b2, b3, b4, b5, b6, b7,
                                b10, b11, b12, b13, b14, b15, b16, b17,
                                b20, b21, b22, b23, b24, b25, b26, b27,
                                b30, b31, b32, b33, b34, b35, b36, b37,
                                b40, b41, b42, b43, b44, b45, b46, b47,
                                b50, b51, b52, b53, b54, b55, b56, b57,
                                b60, b61, b62, b63, b64, b65, b66, b67,
                                b70, b71, b72, b73, b74, b75, b76, b77);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector256<byte> getVec256ConstVar(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7,
                                                     byte b10, byte b11, byte b12, byte b13, byte b14, byte b15, byte b16, byte b17,
                                                     byte b20, byte b21, byte b22, byte b23, byte b24, byte b25, byte b26, byte b27,
                                                     byte b30, byte b31, byte b32, byte b33, byte b34, byte b35, byte b36, byte b37)
    {
        return Vector256.Create(b0, b1, b2, b3, b4, b5, b6, b7,
                                b10, b11, b12, b13, b14, b15, b16, b17,
                                b20, b21, b22, b23, b24, b25, b26, b27,
                                b30, b31, b32, b33, b34, b35, b36, b37);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector512<Int32> getVec512FromVal(Int32 val)
    {
        return Vector512.Create(val);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector256<Int32> getVec256FromVal(Int32 val)
    {
        return Vector256.Create(val);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector512<Int32> getVec512FromOneConst()
    {
        return Vector512.Create(3);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector256<Int32> getVec256FromOneConst()
    {
        return Vector256.Create(4);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector512<Int32> getVec512FromConsts()
    {
        return Vector512.Create(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector256<Int32> getVec256FromConsts()
    {
        return Vector256.Create(0, 1, 2, 3, 4, 5, 6, 7);
    }


    [MethodImpl(MethodImplOptions.NoInlining)]
    public static int getVec512Val(Vector512<Int32> val)
    {
        return val[3];
    }

}




/*using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;


public class Runtime_78310
{


    public static int Main()
    {

        Vector512<Int64> resultElements512ConstArr = getVec512ConstArr();
        for (var i = 0; i < Vector512<Int64>.Count; i++)
        {
            Console.WriteLine("\n getVec512ConstVar Deepak i = " + i + ", val = " + resultElements512ConstArr[i] + "\n");

        }

        return 100;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Vector512<Int64> getVec512ConstArr()
    {
        Int64[] values = new Int64[Vector512<Int64>.Count];

        for (int i = 0; i < Vector512<Int64>.Count; i++)
        {
            values[i] = i;
        }
        Vector512<Int64> val = Vector512.Create(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7]);

        Vector256<Int64> high = val.GetUpper();

        return val;
    }
}
*/
